@using System.Text.RegularExpressions;
@using System.Text.Json;
@inject ApiClient ApiClient

<MudNavMenu Rounded="true" Margin=Margin.Normal Class="pa-2" Color=Color.Primary>
    <MudNavLink Href="" Match="NavLinkMatch.All"
                Icon="@Icons.Material.Filled.Home"
                aria-label="Home navigation option.">
        Home
    </MudNavLink>
    <MudNavLink Href="voicechat" aria-label="Voice chat navigation option."
                Icon="@Icons.Material.Filled.VoiceChat">
        Voice Chat
    </MudNavLink>
    <MudNavLink Href="documents" aria-label="View (and/or upload) documents."
                Icon="@Icons.Material.Filled.FolderSpecial">
        Documents
    </MudNavLink>
    <MudNavLink Href="chat" aria-label="Chat navigation option."
                Icon="@Icons.Material.Filled.QuestionAnswer">
        Chat
    </MudNavLink>
    @if (TalkToAPersonEnabled()) {
        <MudNavLink Href="talk" aria-label="Talk to a person"
                    Icon="@Icons.Material.Filled.QuestionAnswer">
            Talk to a person
        </MudNavLink>    
    } 

</MudNavMenu>

@code {
    private bool talkToAPersonEnabled;

    private bool TalkToAPersonEnabled() {
        return talkToAPersonEnabled;
    }

    private class SplitConfig
    {
        public required string splitName { get; set; }
        public required string treatment { get; set; }
    }    
    protected override async Task OnInitializedAsync()
    {
        DateTime startTime = DateTime.UtcNow;

        string? response = await ApiClient.TalkToAPersonAsync();

        if(response != null) {
            var config = JsonSerializer.Deserialize<SplitConfig>(response);
            talkToAPersonEnabled = string.Equals(config?.treatment, "on");
        }
    }
}